// AUTOGENERATED with quazal-tools
#![allow(
    clippy::enum_variant_names,
    clippy::module_name_repetitions,
    clippy::too_many_lines,
    clippy::upper_case_acronyms,
    clippy::wildcard_imports
)]
use std::convert::TryFrom;

use num_enum::TryFromPrimitive;
use quazal::prudp::ClientRegistry;
use quazal::rmc::basic::FromStream;
use quazal::rmc::basic::ToStream;
use quazal::rmc::ClientProtocol;
use quazal::rmc::Error;
use quazal::rmc::Protocol;
use quazal::rmc::Request;
use quazal::ClientInfo;
use quazal::Context;
use slog::Logger;

#[allow(unused)]
use super::types::*;
pub const HEALTH_PROTOCOL_ID: u16 = 18u16;
#[derive(Debug, TryFromPrimitive)]
#[repr(u32)]
pub enum HealthProtocolMethod {
    PingDaemon = 1u32,
    PingDatabase = 2u32,
    RunSanityCheck = 3u32,
    FixSanityErrors = 4u32,
}
#[derive(Debug, ToStream, FromStream)]
pub struct PingDaemonRequest;
#[derive(Debug, ToStream, FromStream)]
pub struct PingDaemonResponse {
    pub return_value: bool,
}
#[derive(Debug, ToStream, FromStream)]
pub struct PingDatabaseRequest;
#[derive(Debug, ToStream, FromStream)]
pub struct PingDatabaseResponse {
    pub return_value: bool,
}
#[derive(Debug, ToStream, FromStream)]
pub struct RunSanityCheckRequest;
#[derive(Debug, ToStream, FromStream)]
pub struct RunSanityCheckResponse {
    pub return_value: bool,
}
#[derive(Debug, ToStream, FromStream)]
pub struct FixSanityErrorsRequest;
#[derive(Debug, ToStream, FromStream)]
pub struct FixSanityErrorsResponse {
    pub return_value: bool,
}
pub struct HealthProtocolServer<T: HealthProtocolServerTrait<CI>, CI>(
    T,
    ::std::marker::PhantomData<CI>,
);
impl<T: HealthProtocolServerTrait<CI>, CI> HealthProtocolServer<T, CI> {
    pub fn new(implementation: T) -> Self {
        Self(implementation, ::std::marker::PhantomData)
    }
}
impl<T: HealthProtocolServerTrait<CI>, CI> Protocol<CI> for HealthProtocolServer<T, CI> {
    fn id(&self) -> u16 {
        HEALTH_PROTOCOL_ID
    }
    fn name(&self) -> String {
        "HealthProtocol".to_string()
    }
    fn num_methods(&self) -> u32 {
        4u32
    }
    fn handle(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: &Request,
        client_registry: &ClientRegistry<CI>,
        socket: &std::net::UdpSocket,
    ) -> Result<Vec<u8>, Error> {
        let method = HealthProtocolMethod::try_from(request.method_id).ok();
        match method {
            None => Err(Error::UnknownMethod),
            Some(HealthProtocolMethod::PingDaemon) => {
                let req = PingDaemonRequest::from_bytes(&request.parameters)?;
                debug!(logger, "Request: {:?}", req);
                let resp = self
                    .0
                    .ping_daemon(logger, ctx, ci, req, client_registry, socket);
                debug!(logger, "Response: {:?}", resp);
                Ok(resp?.to_bytes())
            }
            Some(HealthProtocolMethod::PingDatabase) => {
                let req = PingDatabaseRequest::from_bytes(&request.parameters)?;
                debug!(logger, "Request: {:?}", req);
                let resp = self
                    .0
                    .ping_database(logger, ctx, ci, req, client_registry, socket);
                debug!(logger, "Response: {:?}", resp);
                Ok(resp?.to_bytes())
            }
            Some(HealthProtocolMethod::RunSanityCheck) => {
                let req = RunSanityCheckRequest::from_bytes(&request.parameters)?;
                debug!(logger, "Request: {:?}", req);
                let resp = self
                    .0
                    .run_sanity_check(logger, ctx, ci, req, client_registry, socket);
                debug!(logger, "Response: {:?}", resp);
                Ok(resp?.to_bytes())
            }
            Some(HealthProtocolMethod::FixSanityErrors) => {
                let req = FixSanityErrorsRequest::from_bytes(&request.parameters)?;
                debug!(logger, "Request: {:?}", req);
                let resp = self
                    .0
                    .fix_sanity_errors(logger, ctx, ci, req, client_registry, socket);
                debug!(logger, "Response: {:?}", resp);
                Ok(resp?.to_bytes())
            }
        }
    }
    fn method_name(&self, method_id: u32) -> Option<String> {
        HealthProtocolMethod::try_from(method_id)
            .ok()
            .map(|e| format!("{:?}", e))
    }
}
#[allow(unused_variables)]
pub trait HealthProtocolServerTrait<CI> {
    fn ping_daemon(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: PingDaemonRequest,
        client_registry: &ClientRegistry<CI>,
        _socket: &std::net::UdpSocket,
    ) -> Result<PingDaemonResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(ping_daemon)
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    fn ping_database(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: PingDatabaseRequest,
        client_registry: &ClientRegistry<CI>,
        _socket: &std::net::UdpSocket,
    ) -> Result<PingDatabaseResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(ping_database)
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    fn run_sanity_check(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: RunSanityCheckRequest,
        client_registry: &ClientRegistry<CI>,
        _socket: &std::net::UdpSocket,
    ) -> Result<RunSanityCheckResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(run_sanity_check)
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    fn fix_sanity_errors(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: FixSanityErrorsRequest,
        client_registry: &ClientRegistry<CI>,
        _socket: &std::net::UdpSocket,
    ) -> Result<FixSanityErrorsResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(fix_sanity_errors)
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
}
pub struct HealthProtocolClient<CI>(::std::marker::PhantomData<CI>);
impl<CI> HealthProtocolClient<CI> {
    pub fn new() -> Self {
        Self(::std::marker::PhantomData)
    }
}
impl<CI> Default for HealthProtocolClient<CI> {
    fn default() -> Self {
        Self::new()
    }
}
impl<CI> ClientProtocol<CI> for HealthProtocolClient<CI> {
    fn id(&self) -> u16 {
        HEALTH_PROTOCOL_ID
    }
    fn name(&self) -> String {
        "HealthProtocol".to_string()
    }
    fn num_methods(&self) -> u32 {
        4u32
    }
    fn method_name(&self, method_id: u32) -> Option<String> {
        HealthProtocolMethod::try_from(method_id)
            .ok()
            .map(|e| format!("{:?}", e))
    }
}
#[allow(unused_variables)]
impl<CI> HealthProtocolClient<CI> {
    pub fn ping_daemon(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: PingDaemonRequest,
    ) -> Result<PingDaemonResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(ping_daemon)
        );
        self.send(
            logger,
            ctx,
            ci,
            HealthProtocolMethod::PingDaemon as u32,
            request.to_bytes(),
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    pub fn ping_database(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: PingDatabaseRequest,
    ) -> Result<PingDatabaseResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(ping_database)
        );
        self.send(
            logger,
            ctx,
            ci,
            HealthProtocolMethod::PingDatabase as u32,
            request.to_bytes(),
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    pub fn run_sanity_check(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: RunSanityCheckRequest,
    ) -> Result<RunSanityCheckResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(run_sanity_check)
        );
        self.send(
            logger,
            ctx,
            ci,
            HealthProtocolMethod::RunSanityCheck as u32,
            request.to_bytes(),
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
    pub fn fix_sanity_errors(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: FixSanityErrorsRequest,
    ) -> Result<FixSanityErrorsResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "HealthProtocol",
            stringify!(fix_sanity_errors)
        );
        self.send(
            logger,
            ctx,
            ci,
            HealthProtocolMethod::FixSanityErrors as u32,
            request.to_bytes(),
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
}
