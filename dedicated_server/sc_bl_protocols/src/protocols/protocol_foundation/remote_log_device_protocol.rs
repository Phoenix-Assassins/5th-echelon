// AUTOGENERATED with quazal-tools
#![allow(
    clippy::enum_variant_names,
    clippy::module_name_repetitions,
    clippy::too_many_lines,
    clippy::upper_case_acronyms,
    clippy::wildcard_imports
)]
use std::convert::TryFrom;

use num_enum::TryFromPrimitive;
use quazal::prudp::ClientRegistry;
use quazal::rmc::basic::FromStream;
use quazal::rmc::basic::ToStream;
use quazal::rmc::ClientProtocol;
use quazal::rmc::Error;
use quazal::rmc::Protocol;
use quazal::rmc::Request;
use quazal::ClientInfo;
use quazal::Context;
use slog::Logger;

#[allow(unused)]
use super::types::*;
pub const REMOTE_LOG_DEVICE_PROTOCOL_ID: u16 = todo!();
#[derive(Debug, TryFromPrimitive)]
#[repr(u32)]
pub enum RemoteLogDeviceProtocolMethod {
    Log = 1u32,
}
#[derive(Debug, ToStream, FromStream)]
pub struct LogRequest {
    pub str_line: String,
}
#[derive(Debug, ToStream, FromStream)]
pub struct LogResponse;
pub struct RemoteLogDeviceProtocolServer<T: RemoteLogDeviceProtocolServerTrait<CI>, CI>(
    T,
    ::std::marker::PhantomData<CI>,
);
impl<T: RemoteLogDeviceProtocolServerTrait<CI>, CI> RemoteLogDeviceProtocolServer<T, CI> {
    pub fn new(implementation: T) -> Self {
        Self(implementation, ::std::marker::PhantomData)
    }
}
impl<T: RemoteLogDeviceProtocolServerTrait<CI>, CI> Protocol<CI>
    for RemoteLogDeviceProtocolServer<T, CI>
{
    fn id(&self) -> u16 {
        REMOTE_LOG_DEVICE_PROTOCOL_ID
    }
    fn name(&self) -> String {
        "RemoteLogDeviceProtocol".to_string()
    }
    fn num_methods(&self) -> u32 {
        1u32
    }
    fn handle(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: &Request,
        client_registry: &ClientRegistry<CI>,
        socket: &std::net::UdpSocket,
    ) -> Result<Vec<u8>, Error> {
        let method = RemoteLogDeviceProtocolMethod::try_from(request.method_id).ok();
        match method {
            None => Err(Error::UnknownMethod),
            Some(RemoteLogDeviceProtocolMethod::Log) => {
                let req = LogRequest::from_bytes(&request.parameters)?;
                debug!(logger, "Request: {:?}", req);
                let resp = self.0.log(logger, ctx, ci, req, client_registry, socket);
                debug!(logger, "Response: {:?}", resp);
                Ok(resp?.to_bytes())
            }
        }
    }
    fn method_name(&self, method_id: u32) -> Option<String> {
        RemoteLogDeviceProtocolMethod::try_from(method_id)
            .ok()
            .map(|e| format!("{:?}", e))
    }
}
#[allow(unused_variables)]
pub trait RemoteLogDeviceProtocolServerTrait<CI> {
    fn log(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: LogRequest,
        client_registry: &ClientRegistry<CI>,
        _socket: &std::net::UdpSocket,
    ) -> Result<LogResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "RemoteLogDeviceProtocol",
            stringify!(log)
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
}
pub struct RemoteLogDeviceProtocolClient<CI>(::std::marker::PhantomData<CI>);
impl<CI> RemoteLogDeviceProtocolClient<CI> {
    pub fn new() -> Self {
        Self(::std::marker::PhantomData)
    }
}
impl<CI> Default for RemoteLogDeviceProtocolClient<CI> {
    fn default() -> Self {
        Self::new()
    }
}
impl<CI> ClientProtocol<CI> for RemoteLogDeviceProtocolClient<CI> {
    fn id(&self) -> u16 {
        REMOTE_LOG_DEVICE_PROTOCOL_ID
    }
    fn name(&self) -> String {
        "RemoteLogDeviceProtocol".to_string()
    }
    fn num_methods(&self) -> u32 {
        1u32
    }
    fn method_name(&self, method_id: u32) -> Option<String> {
        RemoteLogDeviceProtocolMethod::try_from(method_id)
            .ok()
            .map(|e| format!("{:?}", e))
    }
}
#[allow(unused_variables)]
impl<CI> RemoteLogDeviceProtocolClient<CI> {
    pub fn log(
        &self,
        logger: &Logger,
        ctx: &Context,
        ci: &mut ClientInfo<CI>,
        request: LogRequest,
    ) -> Result<LogResponse, Error> {
        warn!(
            logger,
            "Method {}.{} not implemented",
            "RemoteLogDeviceProtocol",
            stringify!(log)
        );
        self.send(
            logger,
            ctx,
            ci,
            RemoteLogDeviceProtocolMethod::Log as u32,
            request.to_bytes(),
        );
        Err(quazal::rmc::Error::UnimplementedMethod)
    }
}
